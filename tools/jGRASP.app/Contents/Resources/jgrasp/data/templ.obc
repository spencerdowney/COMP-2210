!Objective-C

#class interface
<_
@interface CLASS_NAME : SUPERCLASS_NAME
{
   INSTANCE_VARIABLE_DECLARATION;
}
   - INSTANCE_METHOD_DECLARATION :(TYPE1)ARG1 ARG2_NAME:(TYPE2)ARG2;
   + CLASS_METHOD_DECLARATION :(TYPE1)ARG1 ARG2_NAME:(TYPE2)ARG2;
@end
_>

#class implementation
<_
@implementation CLASS_NAME : SUPERCLASS_NAME
{
   INSTANCE_VARIABLE_DECLARATION;
}
   - INSTANCE_METHOD_DEFINITION :(TYPE1)ARG1 ARG2_NAME:(TYPE2)ARG2 {
   }
   - CLASS_METHOD_DEFINITION :(TYPE1)ARG1 ARG2_NAME:(TYPE2)ARG2 {
   }
@end
_>

#category interface
<_
@interface CLASS_NAME (CATEGORY_NAME)
   - INSTANCE_METHOD_DECLARATION :(TYPE1)ARG1 ARG2_NAME:(TYPE2)ARG2;
   + CLASS_METHOD_DECLARATION :(TYPE1)ARG1 ARG2_NAME:(TYPE2)ARG2;
@end
_>

#category implementation
<_
@implementation CLASS_NAME (CATEGORY_NAME)
   - INSTANCE_METHOD_DEFINITION :(TYPE1)ARG1 ARG2_NAME:(TYPE2)ARG2 {
   }
   - CLASS_METHOD_DEFINITION :(TYPE1)ARG1 ARG2_NAME:(TYPE2)ARG2 {
   }
@end
_>

#protocol declaration
<_
@protocol PROTOCOL_NAME
   - INSTANCE_METHOD_DEFINITION :(TYPE1)ARG1 ARG2_NAME:(TYPE2)ARG2;
   - CLASS_METHOD_DEFINITION :(TYPE1)ARG1 ARG2_NAME:(TYPE2)ARG2;
@end
_>

#function
<_
RETURN_TYPE FUNCTION (TYPE1 PARAM1, TYPE2 PARAM2)
{
   ;
}
_>

#compound statement
<_
{
   ;
}
_>

#if / then
<_
if (EXPRESSION)
{
   ;
}
_>

#if / else
<_
if (EXPRESSION) 
{
   ;
}
else
{
   ;
}
_>

#for loop
<_
for (INITALIZATION; TEST_EXPRESSION; INCREMENT)
{
   ;
}
_>

#do loop
<_
do
{
   ;
}
while (EXPRESSION);
_>

#while loop
<_
while (EXPRESSION)
{
   ;
}
_>

#switch
<_
switch (EXPRESSION)
{
   case 1:
      ;
   case 2:
      ;
}
_>
